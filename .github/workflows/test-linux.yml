name: Unit Tests Linux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allow manually triggering from the actions tab
  workflow_dispatch:


env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

  # Enable colour output for GTEST and XML file generation
  GTEST_COLOR: yes
  GTEST_OUTPUT: xml:test-results/

jobs:
  gtest:
    # The CMake configure and build commands are platform agnostic anda should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    env:
      BOOST_PATH: ${{github.workspace}}
      BOOST_ROOT: ${{github.workspace}}/boost/boost
      BOOST_VERSION: 1.79.0

    steps:
    - uses: actions/checkout@v2
   
    - name: Install Packages
      run: |
        sudo apt-get update && sudo apt-get upgrade
        wget https://github.com/red-panda-productions/ipc-lib/releases/download/v1.2.0/ipclib.deb
        sudo apt install ./ipclib.deb
        sudo apt install ${{github.workspace}}/speed-dreams/3rdParty/Packages/solid.deb
        sudo apt-get install libplib-dev
        sudo apt-get install libexpat1-dev
        sudo apt-get install libopenscenegraph-dev
        sudo apt-get install freeglut3-dev
        sudo apt-get install libvorbis-dev
        sudo apt-get install libsdl2-dev
        sudo apt-get install libopenal-dev
        sudo apt-get install libenet-dev
        sudo apt-get install libjpeg-dev
        sudo apt-get install libpng-dev
        sudo apt-get install libcurl4-openssl-dev
        sudo apt-get install libmysqlcppconn-dev
        sudo apt-get install libmsgpack-dev
        sudo apt-get install ninja-build

    - name: Cache boost
      uses: actions/cache@v2
      id: cache-boost
      with:
        # Set the default path as the path to cache
        path: ${{env.BOOST_ROOT}}
        # Use the version as the key to only cache the correct version
        key: boost-${{env.BOOST_VERSION}}-${{runner.os}}

    - name: Install boost
      if: steps.cache-boost.outputs.cache-hit != 'true'
      uses: MarkusJx/install-boost@v2.3.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}
        toolset: gcc
        platform_version: 20.04
        boost_install_dir: ${{env.BOOST_PATH}}
 
    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{runner.os}}-${{env.BUILD_TYPE}}
        max-size: "2GB"

    - name: Install MySQL
      uses: Fettpet/setup-mysql@v1
      with:
        mysql-version: 8.0
        username: SDATest
        password: PASSWORD

    - name: Configure CMake
      shell: bash
      run: cmake -DBoost_INCLUDE_DIR=${{env.BOOST_ROOT}}/include -DBoost_LIBRARY_DIRS=${{env.BOOST_ROOT}}/lib -DCMAKE_GTEST_DISCOVER_TESTS_DISCOVERY_MODE=PRE_TEST -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DOPTION_PACKAGING=0 -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -S '${{github.workspace}}/speed-dreams/source-2.2.3' -B '${{runner.workspace}}/build' -G Ninja

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config Release

    - name: Test
      working-directory: ${{runner.workspace}}/build
      run: ctest -V

    - name: Upload test results
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: test_results_xml
        path: ${{runner.workspace}}/build/IPCTests/test-results/**/*.xml
      
